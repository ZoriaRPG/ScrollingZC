int VectorX3D(int distance, int yaw, int pitch){
	return distance*Sin(pitch)*Cos(yaw);
}

int VectorY3D(int distance, int yaw, int pitch){
	return distance*Sin(pitch)*Sin(yaw);
}

int VectorZ3D(int distance, int yaw, int pitch){
	return distance*Cos(pitch);
}

void RotateX3D(int angle, int cx, int cy, int cz){
	for(int i=0; i<SizeOfArray(cx); i++){
		int y = cy[i];
		int z = cz[i];
		
		cy[i] = y * Cos(angle) - z * Sin(angle);
		cz[i] = z * Cos(angle) + y * Sin(angle);
	}
}

void RotateY3D(int angle, int cx, int cy, int cz){
	for(int i=0; i<SizeOfArray(cx); i++){
		int x = cx[i];
		int z = cz[i];
		
		cx[i] = x * Cos(angle) - z * Sin(angle);
		cz[i] = z * Cos(angle) + x * Sin(angle);
	}
}

void RotateZ3D(int angle, int cx, int cy, int cz){
	for(int i=0; i<SizeOfArray(cx); i++){
		int x = cx[i];
		int y = cy[i];
		
		cx[i] = x * Cos(angle) - y * Sin(angle);
		cy[i] = y * Cos(angle) + x * Sin(angle);
	}
}

hero script h_init
{
	void run()
	{
		this->CollDetection = false;
	}
}

hero script scroll
{
	void run()
	{
		int frame = 0;
		int lsteps[2]={1,2};
		// bitmap image1 = Game->AllocateBitmap();
		// image1->Read(0,"test.png");
		
		bitmap resized = Game->CreateBitmap(256, 256);
		
		bitmap scrn = Game->CreateBitmap(256, 256);
		
		bitmap fullmap = Game->CreateBitmap(256*16, 176*8);
		bitmap fullmap_solid = Game->CreateBitmap(256*16, 176*8);
		bitmap fullmap_type = Game->CreateBitmap(256*16, 176*8);
		bitmap fullmap_flag = Game->CreateBitmap(256*16, 176*8);
		bitmap fullmap_iflag = Game->CreateBitmap(256*16, 176*8);
		
		bitmap herosprite = Game->CreateBitmap(16,16);
		bitmap heroBUF = Game->CreateBitmap(16,16);
		
		TraceS("Bitmap Solidity Pointer is: \n"); Trace(fullmap_solid);
		
		for(int i=0; i<128; i++)
		{
			fullmap->DrawScreen(6, 1, i, (i%16)*256, Floor(i/16)*176, 0);
		}
		
		for(int i=0; i<128; i++)
		{
			fullmap_solid->DrawScreenSolid(0, 1, i, (i%16)*256, Floor(i/16)*176, 0);
		}
		fullmap_solid->Write(0, "dqmap_solid.png", true);
		for(int i=0; i<128; i++)
		{
			fullmap_type->DrawScreenComboTypes(6, 1, i, (i%16)*256, Floor(i/16)*176, 0);
		}
		for(int i=0; i<128; i++)
		{
			fullmap_flag->DrawScreenComboFlags(6, 1, i, (i%16)*256, Floor(i/16)*176, 0);
		}
		for(int i=0; i<128; i++)
		{
			fullmap_iflag->DrawScreenComboIFlags(6, 1, i, (i%16)*256, Floor(i/16)*176, 0);
		}
		
		//scrn->Rectangle(6, 0, 0, 255, 175, 0x00, 1, 0, 0, 0, true, 128);
		//scrn->DrawLayer(6, 1, 0x01, 0, 0, 0, 0, 128);
		
		bitmap b = Game->CreateBitmap(256, 256);
		
		int pPosX, int pPosY;
		int xPos; int yPos;
		while(1)
		{
			++frame;
			this->X = ( 16*8 )-8;
			this->Y = (16*7.5)-56-8;
			//LogPrint("Link->Tile is: %d \n", Link->Tile);
			herosprite->Clear(0);
			herosprite->FastTile(6, 0,0,Link->Tile, 6, 128);
			
			if(Link->InputLeft)
			{
				LogPrint("Solidity is: %f \n", Graphics->GetPixel(fullmap_solid,xPos+Link->X, yPos+Link->Y+56));
				LogPrint("Link->X is: %d \n", Link->X);
				LogPrint("Link->Y is: %d \n", Link->Y);
				if (!(Graphics->GetPixel(fullmap_solid,xPos+Link->X - ( ((frame&1)) ? lsteps[0] : lsteps[1] ), yPos+Link->Y+56+8) ) )
				//LogPrint("xPos is: %d \n", xPos);
					//xPos-=5;
					xPos -= ( ((frame&1)) ? lsteps[0] : lsteps[1] );
			}
			else if(Link->InputRight)
			{
				//LogPrint("Solidity is: %f \n", Graphics->GetPixel(fullmap_solid,xPos+Link->X, yPos+Link->Y+56+8));
				LogPrint("Link->X is: %d \n", Link->X);
				LogPrint("Link->Y is: %d \n", Link->Y);
				//LogPrint("xPos is: %d \n", xPos);
				if (!(Graphics->GetPixel(fullmap_solid,xPos+Link->X + 16 + ( ((frame&1)) ? lsteps[0] : lsteps[1] ), yPos+Link->Y+56+8) ) )
					//xPos+=5;
					xPos += ( ((frame&1)) ? lsteps[0] : lsteps[1] );
			}
				
			if(Link->InputUp)
			{
				//LogPrint("Solidity is: %f \n", Graphics->GetPixel(fullmap_solid,xPos+Link->X, yPos+Link->Y+56));
				//LogPrint("yPos is: %d \n", yPos);
			
				if (!(Graphics->GetPixel(fullmap_solid,xPos+Link->X+8, yPos+Link->Y + 56 - ( ((frame&1)) ? lsteps[0] : lsteps[1] )) ) )
					//yPos -= 5;
					yPos -= ( ((frame&1)) ? lsteps[0] : lsteps[1] );
			}
			else if(Link->InputDown)
			{
				//LogPrint("Solidity is: %f \n", Graphics->GetPixel(fullmap_solid,xPos+Link->X, yPos+Link->Y+56));
				//LogPrint("yPos is: %d \n", yPos);
				if (!(Graphics->GetPixel(fullmap_solid,xPos+Link->X+8, 16+yPos+Link->Y+56 + ( ((frame&1)) ? lsteps[0] : lsteps[1] )) ))
					//yPos+=5;
					yPos += ( ((frame&1)) ? lsteps[0] : lsteps[1] );
			}
			
			xPos = Clamp(xPos, 0, 256*15);
			yPos = Clamp(yPos, 0, 176*7);
			
			scrn->BlitTo(6, fullmap, xPos, yPos, 256, 256, 0, 0, resized->Width, resized->Height, 0, 0, 0, 0, 0, false);
			
			int sW = 128;
			int sH = 128;
			
			scrn->Blit(7, -2, 0, 0, 256, 256, 0, -56, 256, 256, 0, 0, 0, 0, 0, false);
			
			herosprite->Blit(7, -2, 0, 0, 16, 16, this->X, this->Y, 16, 16, 0, 0, 0, (( this->Dir == DIR_LEFT ) ? BITDX_VFLIP : 0), 0, true);
			
			
			NoAction();
			
			Waitframe();
		}
	}
}