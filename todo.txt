Track the current screen IDs on a given map.
	We will need these to read enemy lists, and screen item data,
		screen sctrings and other roomdata.

Allow the player sprite moving out of the centre of the camera, when the bitmap can no longer pan.
	This will require a refactor that locks the player to specific coordinates
	only when panning is legal, and thus, we need CanPan() and similar.
	
	The current method locks the centre of the camera ont he player, so that 
	needs to be rewritten for a fixed centre. 
	
RPG ENGINE
----------

Terrain effects. Forests have higher encounter rates, mountains slow the player down.
	Swamps hurt the player. 
	
Fix solidity of forest tiles. 

Status menus. 
	
Random encounters. We need to read screen enemy lists from the data (current screen slices)
	to determine what encounters can happen. 

	When an encounte roccurs, we draw a new bitmap to the screen with a visual
	effect (e.g..3d spin) with the graphical tiles of that enemy.
	
	We also draw the encounter menu at this time, and run the encounter. 
	
TOWNE/CASTLE: 

DUNGEON: 

ZELDA ENGINE
------------
	
Spawn enemies. We will read bitmaps for enemy spawn flags, and when we find one,
	we will erase that spawn flag on the bitmap, and spawn an npc using 
	the enemy lists for the screen. 
	
	As bitmaps are cleared and regenerated on every dmap change, it is safe to clear that flag
	from the bitmap. 
	
	It may be wiser to do this in one sweep, when the bitmaps are loaded, and then
	we store a list of virtual coordinates for enemies, and their IDs.
	
	That way, we need only reference the bitmap once, and we can more easily edit the
	spawn data; but otherwise, we'd write a block of colour 0, 16x16px to the bitmap
	to denote that the enemy was spawned. 
	
Enemies pan offscreen. Once we have enemies spawning, they will also need to be moved
	when the bitmap pans. If they fall offscreen, and are otherwise not tracking
	the player, or not moving toward the player, we put them in a state of hibernation.

	In this state, their positional data, and their type/ID data is stored in an array, and
	we mark down somewhere that ( if the current camera view is within coordinates x1, x2, y1, y2)
	we put them back into use. 
	
Weapons. 

Items. 
		