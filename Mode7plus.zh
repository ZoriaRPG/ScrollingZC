ffc script Mode7{
	void run(){
		int str1[] = "ANGLE";
		int str2[] = "Z";
		int str3[] = "HORIZON";
		int str4[] = "SCALE_X";
		int str5[] = "SCALE_Y";
		int str6[] = "CENTER_X";
		int str7[] = "CENTER_Y";
		int str8[] = "CAMERA";
		int str9[] = "BITMAP PREVIEW";
		
		int strRegionBoxOn[] = "REGIONBOX ON";
		int strRegionBoxOff[] = "REGIONBOX OFF";
		
		int names[16] = {str1, str2, str3, str4, str5, str6, str7, str8, str9};
		int args[16] = {0, 100, 32, 200, 200, 128, 256, 0, 0};
		
		int i = 7;
		int camX;
		int camY;
		
		bool regionBoxOn = false;
		while(true){
			Screen->DrawString(7, 0, 0, FONT_Z1, 0x01, 0x0F, TF_NORMAL, names[i], 128);
			Screen->DrawInteger(7, 0, 8, FONT_Z1, 0x01, 0x0F, -1, -1, args[i], 0, 128);
			if(regionBoxOn)
				Screen->DrawString(7, 0, 16, FONT_Z1, 0x01, 0x0F, TF_NORMAL, strRegionBoxOn, 128);
			else
				Screen->DrawString(7, 0, 16, FONT_Z1, 0x01, 0x0F, TF_NORMAL, strRegionBoxOff, 128);
			if(Link->PressL){
				i--;
				if(i<0)
					i += 9;
			}
			else if(Link->PressR){
				i++;
				if(i>=9)
					i -= 9;
			}
			
			if(Link->PressA)
				regionBoxOn = !regionBoxOn;
				
			if(i==7||i==8){
				if(Link->InputUp)
					camY -= 5;
				else if(Link->InputDown)
					camY += 5;
				if(Link->InputLeft)
					camX -= 5;
				else if(Link->InputRight)
					camX += 5;
					
				camX = Clamp(camX, 0, 15*256);
				camY = Clamp(camY, 0, 7*176);
			}
			else{
				if(Link->InputUp){
					args[i]--;
				}
				else if(Link->InputDown){
					args[i]++;
				}
			}
			
			if(i==8){
				Screen->SetRenderTarget(RT_BITMAP1);
				Screen->Rectangle(6, 0, 0, 511, 511, 0x00, 1, 0, 0, 0, true, 128);
				Mode7_DrawTrueScreenPosition(128, 128, camX, camY);
				
				if(regionBoxOn){
					Screen->Rectangle(6, 128, 128, 128+255, 128+175, 0x81, 1, 0, 0, 0, false, 128);
					Screen->Rectangle(6, 128-1, 128-1, 128+255+1, 128+175+1, 0x81, 1, 0, 0, 0, false, 128);
					Screen->Rectangle(6, 128-2, 128-2, 128+255+2, 128+175+2, 0x81, 1, 0, 0, 0, false, 128);
				}
				
				Screen->SetRenderTarget(RT_SCREEN);
				Screen->DrawBitmap(6, RT_BITMAP1, 0, 0, 512, 512, 0, 0, 256, 176, 0, false);
			}
			else{
				Screen->SetRenderTarget(RT_BITMAP1);
				Screen->Rectangle(6, 0, 0, 511, 511, 0x00, 1, 0, 0, 0, true, 128);
				Mode7_DrawTrueScreenPosition(128, 128, camX, camY);
				
				if(regionBoxOn){
					Screen->Rectangle(6, 128, 128, 128+255, 128+175, 0x81, 1, 0, 0, 0, false, 128);
					Screen->Rectangle(6, 128-1, 128-1, 128+255+1, 128+175+1, 0x81, 1, 0, 0, 0, false, 128);
					Screen->Rectangle(6, 128-2, 128-2, 128+255+2, 128+175+2, 0x81, 1, 0, 0, 0, false, 128);
				}
				
				Screen->SetRenderTarget(RT_SCREEN);
				Screen->Rectangle(6, 0, 0, 255, 175, 0x72, 1, 0, 0, 0, true, 128);
				DrawBitmapMode7(6, RT_BITMAP1, 128, 128, 256, 176, 256, 176, args[0], args[5], args[6], args[1], args[2], args[3], args[4]);
			}
			NoAction();
			Waitframe();
		}
	}
	void Mode7_DrawTrueScreenPosition(int x, int y, int mapX, int mapY){
		int scrn = Round(mapX/256)+Round(mapY/176)*16;
		
		int scrnX = (scrn%16)*256;
		int scrnY = Floor(scrn/16)*176;
		
		int drawX = Round(scrnX-mapX);
		int drawY = Round(scrnY-mapY);
		
		Screen->DrawLayer(6, Game->GetCurMap(), scrn, 0, x + drawX, y + drawY, 0, 128);
		if(scrn>15)
			Screen->DrawLayer(6, Game->GetCurMap(), scrn-16, 0, x + drawX, y + drawY-176, 0, 128);
		if(scrn>31)
			Screen->DrawLayer(6, Game->GetCurMap(), scrn-32, 0, x + drawX, y + drawY-352, 0, 128);
		if(scrn<112)
			Screen->DrawLayer(6, Game->GetCurMap(), scrn+16, 0, x + drawX, y + drawY+176, 0, 128);
		if(scrn<96)
			Screen->DrawLayer(6, Game->GetCurMap(), scrn+32, 0, x + drawX, y + drawY+352, 0, 128);
		if(scrn%16>0)
			Screen->DrawLayer(6, Game->GetCurMap(), scrn-1, 0, x + drawX-256, y + drawY, 0, 128);
		if(scrn%16<15)
			Screen->DrawLayer(6, Game->GetCurMap(), scrn+1, 0, x + drawX+256, y + drawY, 0, 128);
		if(scrn>15 && scrn%16>0)
			Screen->DrawLayer(6, Game->GetCurMap(), scrn-17, 0, x + drawX-256, y + drawY-176, 0, 128);
		if(scrn>31 && scrn%16>0)
			Screen->DrawLayer(6, Game->GetCurMap(), scrn-33, 0, x + drawX-256, y + drawY-352, 0, 128);
		if(scrn>15 && scrn%16<15)
			Screen->DrawLayer(6, Game->GetCurMap(), scrn-15, 0, x + drawX+256, y + drawY-176, 0, 128);
		if(scrn>31 && scrn%16<15)
			Screen->DrawLayer(6, Game->GetCurMap(), scrn-31, 0, x + drawX+256, y + drawY-352, 0, 128);
		if(scrn<112 && scrn%16>0)
			Screen->DrawLayer(6, Game->GetCurMap(), scrn+15, 0, x + drawX-256, y + drawY+176, 0, 128);
		if(scrn<96 && scrn%16>0)
			Screen->DrawLayer(6, Game->GetCurMap(), scrn+31, 0, x + drawX-256, y + drawY+352, 0, 128);
		if(scrn<112 && scrn%16<15)
			Screen->DrawLayer(6, Game->GetCurMap(), scrn+17, 0, x + drawX+256, y + drawY+176, 0, 128);
		if(scrn<96 && scrn%16<15)
			Screen->DrawLayer(6, Game->GetCurMap(), scrn+33, 0, x + drawX+256, y + drawY+352, 0, 128);
		
		// Screen->DrawLayer(6, Game->GetCurMap(), scrn, 0, drawX, drawY, 0, 128);
		// if(scrn>15)
			// Screen->DrawLayer(6, Game->GetCurMap(), scrn-16, 0, drawX, drawY-176, 0, 128);
		// if(scrn<112)
			// Screen->DrawLayer(6, Game->GetCurMap(), scrn+16, 0, drawX, drawY+176, 0, 128);
		// if(scrn%16>0)
			// Screen->DrawLayer(6, Game->GetCurMap(), scrn-1, 0, drawX-256, drawY, 0, 128);
		// if(scrn%16<15)
			// Screen->DrawLayer(6, Game->GetCurMap(), scrn+1, 0, drawX+256, drawY, 0, 128);
		// if(scrn%16<14)
			// Screen->DrawLayer(6, Game->GetCurMap(), scrn+2, 0, drawX+512, drawY, 0, 128);
		// if(scrn>15 && scrn%16>0)
			// Screen->DrawLayer(6, Game->GetCurMap(), scrn-17, 0, drawX-256, drawY-176, 0, 128);
		// if(scrn>15 && scrn%16<15)
			// Screen->DrawLayer(6, Game->GetCurMap(), scrn-15, 0, drawX+256, drawY-176, 0, 128);
		// if(scrn>15 && scrn%16<14)
			// Screen->DrawLayer(6, Game->GetCurMap(), scrn-14, 0, drawX+512, drawY-176, 0, 128);
		// if(scrn<112 && scrn%16>0)
			// Screen->DrawLayer(6, Game->GetCurMap(), scrn+15, 0, drawX-256, drawY+176, 0, 128);
		// if(scrn<112 && scrn%16<15)
			// Screen->DrawLayer(6, Game->GetCurMap(), scrn+17, 0, drawX+256, drawY+176, 0, 128);
		// if(scrn<112 && scrn%16<14)
			// Screen->DrawLayer(6, Game->GetCurMap(), scrn+18, 0, drawX+512, drawY+176, 0, 128);
	}
}

void DrawBitmapMode7(int layer, int rt, int srcX, int srcY, int srcW, int srcH, int destW, int destH, int angle, int cx, int cy, int space_z, int horizon, int scale_x, int scale_y){
	int screen_x; int screen_y;
	
	int distance; int horizontal_scale;
	
	int mask_x;
	int mask_y;
	
	int line_dx; int line_dy;
	
	int space_x; int space_y;
	
	for(screen_y=0; screen_y<destH; screen_y++){
		distance = (space_z * scale_y) / (screen_y + horizon);
		
		horizontal_scale = (distance / scale_x);
		
		line_dx = horizontal_scale;
		line_dy = 0;
		
		space_x = cx - destW/2 * line_dx;
		space_y = cy - distance + destH/2 * line_dy;
		
		if(srcY+space_y>=0)
			Screen->DrawBitmap(layer, rt, srcX+space_x, srcY+space_y, line_dx*destW, 1, screen_x, screen_y, destW, 1, 0, false);
	}
}